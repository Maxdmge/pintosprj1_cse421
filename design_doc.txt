+--------------------+
| CS 140 |
| PROJECT 1: THREADS |
| DESIGN DOCUMENT |
+--------------------+
---- GROUP ----
>> Fill in the names and email addresses of your group members.
Dean Mekulovic deanmeku@buffalo.edu
Yun Yang yyang94@buffalo.edu
FirstName LastName <email@domain.example>
---- PRELIMINARIES ----
>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
ALARM CLOCK
===========
---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration. Identify the purpose of each in 25 words or less.

  // we should use a struct to store the thread, and an int time that the thread will be freed.
---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

A2:  A thread that is set to sleep will immediately be blocked. It will then be inserted to a sorted list of threads (let's call this thread_list), 
sorted by their time of being free. thread_list will be consulted whenever thread_start() is called,
with each thread that has passed this tick time being called with thread_unblock().
The timer interrupt handler will only be accessed in thread_start(), as that's the only time where the threads will be changing state out of sleep.
The effects of accessing the timer interrupt handler will be potentially losing ticks and making the program run slowly, so we have to make sure
that as little time as possible is spent with it off.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Most of the calculations regarding thread_list will be done with the timer interrupt handler not being accessed, such as sorting.
When we change the state of a thread from blocked to ready, we will avoid high latencies by making any modifications (removals of these threads)
from thread_list after we have finished readying all of the threads.
This means we won't need a mutex to access thread_list during the timer interrupt disabled stage, as we're only accessing the information in the variables.

---- SYNCHRONIZATION ----
>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

For thread_list, any accesses to it will be handles in a locked mutex. This is both true in thread_start() and timer_sleep(). Only one
function can modify thread_list at a time.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Timer interrupts will only be initiated in a locked mutex in thread_start(), the same locked mutex that makes modifications to thread_list which holds information
about the threads.

---- RATIONALE ----
>> A6: Why did you choose this design? In what ways is it superior to
>> another design you considered?

Another design we considered was to initiate a separate thread that utilizes a monitor to check if a thread needs to be unblocked at a certain tick. This design was both intensive (might even be considered a form of busy waiting), and difficult to implement, as it requires keeping track of N conditions, where each condition is set with a certain tick time.

PRIORITY SCHEDULING
===================
---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration. Identify the purpose of each in 25 words or less.
>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation. (Alternately, submit a
10/3/24, 2:26 PM cse.buffalo.edu/faculty/tkosar/cse421-521
_
fall2013/projects/project-2/WWW/threads.tmpl
https://cse.buffalo.edu/faculty/tkosar/cse421-521
_
fall2013/projects/project-2/WWW/threads.tmpl 1/3
>> .png file.)
---- ALGORITHMS ----
>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation. How is nested donation handled?
>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
---- SYNCHRONIZATION ----
>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it. Can you use a lock to avoid
>> this race?
---- RATIONALE ----
>> B7: Why did you choose this design? In what ways is it superior to
>> another design you considered?
ADVANCED SCHEDULER
==================
---- DATA STRUCTURES ----
>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration. Identify the purpose of each in 25 words or less.
---- ALGORITHMS ----
>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2. Each
>> has a recent_cpu value of 0. Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:
timer recent_cpu priority thread
ticks A B C A B C to run
----- -- -- -- -- -- -- ------
0
4
8
12
16
20
24
28
32
36
>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain? If so, what rule did you use to resolve
>> them? Does this match the behavior of your scheduler?
>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?
---- RATIONALE ----
>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices. If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it. Why did you
>> decide to implement it the way you did? If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so? If not, why not?
SURVEY QUESTIONS
================
Answering these questions is optional, but it will help us improve the
course in future quarters. Feel free to tell us anything you
want--these questions are just to spur your thoughts. You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.
>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard? Did it take too long or too little time?
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems? Conversely, did you
>> find any of our guidance to be misleading?
>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
>> Any other comments?
